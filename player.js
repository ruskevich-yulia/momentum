//–∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ–≥–¥–∞ –ø–∏—à—É—Ç—Å—è –≤–Ω–∞—á–∞–ª–µ js
import { musicInfo } from "./musicInfo.js";  //–±–µ–∑ webpack –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ(.js) 
//–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ js—Ñ–∞–π–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–¥—É–ª–µ–º(—Ç –µ —á–∞—Å—Ç—å—é –æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ js  –∏ –±—Ä–∞—É–∑–µ—Ä –¥ –± –∏–∑–≤–µ—â–µ–Ω,—á—Ç–æ —ç—Ç–æ –º–æ–¥—É–ª—å)
const playButton = document.querySelector('.play');
const soundImage = document.querySelector('.img_artist');
const artist = document.querySelector('.artist');
const composition = document.querySelector('.composition');
const previousSong = document.querySelector('.previous_song');
const nextSong = document.querySelector('.next_song');
const volumeSwitchButton = document.querySelector('.vol');
volumeSwitchButton.value = 'üîä';
const volumeAdjustingRange = document.querySelector('.volume_adjusting_range');
const currentTimeTrack = document.querySelector('.current_time');//—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
const endTime = document.querySelector('.end_time');//–≤—Ä–µ–º—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
const track = document.querySelector('.track');//–∏–Ω–ø—É—Ç —Å –¥–æ—Ä–æ–∂–∫–æ–π —Ç—Ä–µ–∫–∞
let isDragg = false;  //—Ç –µ –ø–æ–ª–∑—É–Ω–æ–∫ —Ç—Ä–µ–∫–∞ –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω

const audio = new Audio();//—Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∞—É–¥–∏–æ,–∫—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –∏ —Ç–¥ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
let i = 0;
soundImage.src = musicInfo[i].artistImage;
artist.textContent = musicInfo[i].artist;
composition.textContent = musicInfo[i].composition;
audio.src = musicInfo[i].sound; //–º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø—É—Ç—å,–ø–æ –∫—Ä–æ–º—É –ª–µ–∂–∏—Ç –ø–µ—Å–Ω—è
audio.volume = 0.1;// –∑–∞–±—ã–ª–∞

let isPlay = false; // —Ç –∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–µ—Ä –Ω–µ –∏–≥—Ä–∞–µ—Ç
const playPauseSound = () => {
    if(isPlay) {
        audio.pause();
        playButton.textContent = '‚ñ∂';
    } else {
        audio.play();
        playButton.textContent = '‚ùö‚ùö';
    };
    isPlay = !isPlay;// —Ç –µ –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
}
playButton.addEventListener('click',playPauseSound);

const nextComposition = () => {
  if (i < musicInfo.length) {
    i = i + 1;
  } else {
    i = 0;
  }
  audio.src = musicInfo[i].sound
  soundImage.src = musicInfo[i].artistImage;
  artist.textContent = musicInfo[i].artist;
  composition.textContent = musicInfo[i].composition;
  audio.play()
};
audio.addEventListener('ended',nextComposition)

const changePrevSong = () => {
  if(i > 0) {
    i = i - 1;
  } else {
   i = musicInfo.length; 
  }
  audio.src = musicInfo[i].sound
  soundImage.src = musicInfo[i].artistImage;
  artist.textContent = musicInfo[i].artist;
  composition.textContent = musicInfo[i].composition;
  audio.play()
}

previousSong.addEventListener('click',changePrevSong)

nextSong.addEventListener('click',nextComposition);

const switchVolume = () => {
 if(audio.volume === 0) {
    audio.volume = 1;
    volumeSwitchButton.value = 'üîä'
 } else {
    audio.volume = 0;
    volumeSwitchButton.value = 'üîá'
 };
}

volumeSwitchButton.addEventListener('click',switchVolume);

const adjustVolume = (e) => {
  const currentVolumeValue = e.target.value
  audio.volume = +currentVolumeValue/100
} 

volumeAdjustingRange.addEventListener('input',adjustVolume);

const getCorrectFormat = (number) => {
  return number < 10 ? `0${number}` : number;
}

const getMinuteTimeFormat = (timeInSeconds) => {
  let hours, minutes, seconds;
  hours = Math.floor(timeInSeconds / 3600); //–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑
  minutes = Math.floor((timeInSeconds - (hours * 3600)) / 60);
  seconds = Math.ceil(timeInSeconds - (hours * 3600) - (minutes * 60)); //–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
  return `${hours? `${hours}:` : ''}${minutes ? `${getCorrectFormat(minutes)}:` : '00:'  }${seconds ? getCorrectFormat(seconds) : ''}`;
}

const setSoundFullTime = () => {
  const trackDuration = audio.duration;
  const fullTime = getMinuteTimeFormat(trackDuration);
  endTime.textContent = fullTime;
  track.max = audio.duration;
}
audio.addEventListener('durationchange',setSoundFullTime);//–ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü

const calculateCurrentSoundTime = () => {
  const currentSoundTime = getMinuteTimeFormat(audio.currentTime)//–≤—ã–≤–æ–¥–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∏–Ω.—Å–µ–∫
  currentTimeTrack.textContent = currentSoundTime;
  if(!isDragg) {track.value = audio.currentTime};
}

audio.addEventListener('timeupdate',calculateCurrentSoundTime);

const playInSpecificPosition = (e) => {
  audio.currentTime = e.target.value;
  calculateCurrentSoundTime();
  isDragg = false;
};

track.addEventListener('mouseup',playInSpecificPosition)//–ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –º—ã—à–∫–æ–π –ø–æ–ª–∑—É–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–∞—Ç—å —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏

track.addEventListener('mousedown', () => {//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –º—ã—à–∫–æ–π –Ω–∞ –ø–æ–ª–∑—É–Ω–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ isDragg
  isDragg = true;
});




